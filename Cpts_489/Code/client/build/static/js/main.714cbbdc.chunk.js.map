{"version":3,"sources":["AppMode.js","components/NavBar.js","components/SideMenu.js","components/ModeBar.js","components/FloatingButton.js","components/CreateAccountDialog.js","components/ResetPasswordDialog.js","components/LoginPage.js","components/FeedPage.js","components/RoundsTable.js","components/RoundForm.js","components/Rounds.js","components/CoursesPage.js","components/App.js","serviceWorker.js","index.js"],"names":["AppMode","LOGIN","FEED","ROUNDS","ROUNDS_LOGROUND","ROUNDS_EDITROUND","COURSES","Object","freeze","NavBar","getMenuBtnIcon","props","mode","menuOpen","handleMenuBtnClick","changeMode","toggleMenuOpen","className","onClick","this","id","src","alt","height","width","title","React","Component","SideMenu","renderModeMenuItems","profilePicURL","displayName","logOut","ModeBar","FloatingButton","handleClick","CreateAccountDialog","checkAccountValidity","state","accountPassword","accountPasswordRepeat","repeatPassRef","current","setCustomValidity","handleNewAccountChange","event","target","name","value","length","setState","self","reader","FileReader","readAsDataURL","profilePicRef","files","addEventListener","result","setDefaultDisplayName","handleCreateAccount","a","preventDefault","url","accountName","accountInfo","password","securityQuestion","accountSecurityQuestion","securityAnswer","accountSecurityAnswer","fetch","headers","method","body","JSON","stringify","res","status","accountCreateStatus","text","resText","newUserRef","createRef","role","cancelCreateAccount","onSubmit","type","size","placeholder","pattern","required","ref","onChange","onBlur","accept","profilePic","rows","cols","maxLength","ResetPasswordDialog","LoginPage","handleLoginSubmit","loginBtnIcon","loginBtnLabel","emailInputRef","passwordInputRef","window","open","loginMsg","msg","accountCreateMsg","showCreateAccountDialog","handleOAuthLogin","provider","handleOAuthLoginClick","setTimeout","showResetPasswordDialog","githubIcon","githubLabel","googleLabel","googleIcon","focus","htmlFor","style","padding","fontSize","FeedPage","fontStyle","RoundsTable","editRound","setEditId","confirmDelete","setDeleteId","alert","renderTable","table","r","push","key","rounds","date","substring","course","Number","strokes","minutes","seconds","keys","colSpan","RoundForm","handleChange","newSec","newSGS","computeSGS","SGS","newStrokes","newMin","handleSubmit","faIcon","btnLabel","roundData","saveRound","min","sec","today","Date","now","getTimezoneOffset","toISOString","substr","holes","notes","thisRound","startData","max","disabled","Rounds","addRound","newData","userObj","refreshOnUpdate","editId","_id","deleteRound","val","deleteId","icon","CoursesPage","modeTitle","modeToPage","App","newMode","response","json","obj","parse","handleChangeMode","openMenu","closeMenu","prevState","setUserId","Id","userId","authenticated","then","isAuthenticated","user","ModePage","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.714cbbdc.chunk.js","sourcesContent":["/* AppMode: The enumerated type for AppMode. */\n\nconst AppMode = {\n    LOGIN: \"LoginMode\",\n    FEED: \"FeedMode\",\n    ROUNDS: \"RoundsMode\",\n    ROUNDS_LOGROUND: \"RoundsMode-LogRound\",\n    ROUNDS_EDITROUND: \"RoundsMode-EditRound\",\n    COURSES: \"CoursesMode\"\n};\n\nObject.freeze(AppMode); //This ensures that the object is immutable.\n\nexport default AppMode;","import React from 'react';\nimport AppMode from '../AppMode';\n\nclass NavBar extends React.Component {\n\n  getMenuBtnIcon = () => {\n      if (this.props.mode === AppMode.ROUNDS_LOGROUND || \n          this.props.mode === AppMode.ROUNDS_EDITROUND)\n          return \"fa fa-arrow-left\";\n      if (this.props.menuOpen)\n        return \"fa fa-times\";\n      return \"fa fa-bars\";\n  }\n\n  handleMenuBtnClick = () => {\n    if (this.props.mode === AppMode.ROUNDS_LOGROUND ||\n        this.props.mode === AppMode.ROUNDS_EDITROUND) {\n      this.props.changeMode(AppMode.ROUNDS);\n    } else if (this.props.mode != AppMode.LOGIN) {\n      this.props.toggleMenuOpen();\n    }\n  }\n\n    \n  render() {\n    return (\n    <div className=\"navbar\">  \n    <span className=\"navbar-items\">\n      <button className=\"sidemenu-btn\" onClick={this.handleMenuBtnClick}>\n        <span id=\"menuBtnIcon\" className={\"sidemenu-btn-icon \" + this.getMenuBtnIcon()}>\n        </span>\n      </button>\n      <img src=\"http://tiny.cc/sslogo\" alt=\"Speed Score Logo\" height=\"38px\"\n      width=\"38px\" />\n      <span className=\"navbar-title\">\n        &nbsp;{this.props.title}\n      </span>\n    </span>\n  </div>\n); \n}\n}\n\nexport default NavBar;\n","import React from 'react';\nimport AppMode from './../AppMode.js'\n\nclass SideMenu extends React.Component {\n\n//renderModeItems -- Renders correct subset of mode menu items based on\n//current mode, which is stored in this.prop.mode. Uses switch statement to\n//determine mode.\nrenderModeMenuItems = () => {\n  switch (this.props.mode) {\n    case AppMode.FEED:\n      return(\n        <div>\n        <a className=\"sidemenu-item\">\n            <span className=\"fa fa-users\"></span>&nbsp;Followed Users</a>\n        <a className=\"sidemenu-item \">\n            <span className=\"fa fa-search\"></span>&nbsp;Search Feed</a>\n        </div>\n      );\n    break;\n    case AppMode.ROUNDS:\n      return(\n        <div>\n          <a className=\"sidemenu-item\">\n            <span className=\"fa fa-plus\"></span>&nbsp;Log New Round</a>\n          <a className=\"sidemenu-item\">\n            <span className=\"fa fa-search\"></span>&nbsp;Search Rounds</a>\n        </div>\n      );\n    break;\n    case AppMode.COURSES:\n      return(\n        <div>\n        <a className=\"sidemenu-item\">\n            <span className=\"fa fa-plus\"></span>&nbsp;Add a Course</a>\n        <a className=\"sidemenu-item\">\n            <span className=\"fa fa-search\"></span>&nbsp;Search Courses</a>\n        </div>\n      );\n    default:\n        return null;\n    }\n}\n\n    render() {\n       return (\n        <div className={\"sidemenu \" + (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")}\n             onClick={this.props.toggleMenuOpen}>\n          {/* SIDE MENU TITLE */}\n          <div className=\"sidemenu-title\">\n            <img src={this.props.profilePicURL} height='60' width='60' />\n            <span id=\"userID\" className=\"sidemenu-userID\">&nbsp;{this.props.displayName}</span>\n        </div>\n          {/* MENU CONTENT */}\n          {this.renderModeMenuItems()}\n          {/* The following menu items are present regardless of mode */}\n          <a id=\"aboutBtn\" className=\"sidemenu-item\">\n            <span className=\"fa fa-info-circle\"></span>&nbsp;About</a>\n          <a id=\"logOutBtn\" className=\"sidemenu-item\" onClick={this.props.logOut}>\n            <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out</a>\n        </div>\n       );\n    }\n}\n\nexport default SideMenu;\n","import React from 'react';\nimport AppMode from '../AppMode.js';\n\n\nclass ModeBar extends React.Component {\n    render() {\n      return(\n        <div className={\"modebar\" + (this.props.mode === AppMode.LOGIN ? \n          \" invisible\" : (this.props.menuOpen ? \" ignore-click visible\" : \" visible\"))}>\n        <a className={(this.props.mode === AppMode.FEED ? \" item-selected\" : null)}\n            onClick={()=>this.props.changeMode(AppMode.FEED)}>\n          <span className=\"modebaricon fa fa-th-list\"></span>\n          <span className=\"modebar-text\">Feed</span>\n        </a>\n        <a className={(this.props.mode === AppMode.ROUNDS || \n               this.props.mode === AppMode.ROUNDS_EDITROUND || \n               this.props.mode === AppMode.ROUNDS_LOGROUND ? \n                  \" item-selected\" : null)}\n           onClick={()=>this.props.changeMode(AppMode.ROUNDS)}>\n          <span className=\"modebar-icon  fa fa-history\"></span>\n          <span className=\"modebar-text\">Rounds</span>\n        </a>\n        <a className={(this.props.mode === AppMode.COURSES ? \" item-selected\" : null)}\n          onClick={()=>this.props.changeMode(AppMode.COURSES)}>\n          <span className=\"modebar-icon  fa fa-flag\"></span>\n          <span className=\"modebar-text\">Courses</span>\n        </a> \n        </div>\n      );\n    }\n}\n\nexport default ModeBar;\n","import React from 'react';\n\nclass FloatingButton extends React.Component {\n    render() {\n      return(\n        <div className=\"floatbtn\" onClick={this.props.handleClick}>\n          <span className=\"floatbtn-icon fa fa-plus\"></span>\n        </div>  \n      );\n    }\n}\n\nexport default FloatingButton;\n","import React from 'react';\n\nclass CreateAccountDialog extends React.Component {\n\n    constructor() {\n        super();\n        //Create a ref for the email input DOM element\n        this.newUserRef = React.createRef();\n        this.repeatPassRef = React.createRef();\n        this.profilePicRef = React.createRef();\n        this.state = {accountName: \"\",\n                      displayName: \"\",\n                      profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\n                      accountPassword: \"\",\n                      accountPasswordRepeat: \"\",\n                      accountSecurityQuestion: \"\",\n                      accountSecurityAnswer: \"\"};\n\n    }\n\n    //checkAccountValidity -- Callback function invoked after a form element in\n    //the 'Create Account' dialog box changes and component state has been\n    //updated. We need to check whether the passwords match. If they do not, \n    //we set a custom validity message to be displayed when the user clicks the\n    //'Create Account' button. Otherwise, we reset the custom validity message\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\n    checkAccountValidity = () => {\n        if (this.state.accountPassword != this.state.accountPasswordRepeat) {\n            //Passwords don't match\n            this.repeatPassRef.current.setCustomValidity(\n            \"This password must match original password.\");\n        } else {\n            this.repeatPassRef.current.setCustomValidity(\"\");\n        }\n    }\n\n    //handleNewAccountChange--Called when a field in a dialog box form changes.\n    handleNewAccountChange = (event) => {\n        if (event.target.name === \"profilePic\") {\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\n                this.setState({profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\"});\n            } else { //The user selected a file\n                const self = this;\n                const val = event.target.value;\n                const reader = new FileReader();\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\n                reader.addEventListener(\"load\",function() {\n                    self.setState({profilePicURL: this.result});\n                });\n            }\n        } else {\n            this.setState({[event.target.name]: event.target.value},this.checkAccountValidity);\n        }\n    } \n\n    //setDefaultDisplayName -- Triggered by onBlur() event of Email field.\n    //Sets default value of display name to value entered into Email field \n    //as a courtesy.\n    setDefaultDisplayName = (event) => {\n      if (event.target.value.length > 0 && this.state.displayName === \"\") {\n        this.setState({displayName: event.target.value});\n      }\n    }\n\n    //handleCreateAccount -- Triggered when user clicks on \"Create Account\" button.\n    //Custom data checking ensures user account under this email does not \n    //already exist and that the rest of the info is valid. We create a new  \n    // object for user, save it to localStorage and take user to app's \n    //landing page. \n    handleCreateAccount = async (event) =>{\n        event.preventDefault();\n        const url = '/users/' + this.state.accountName;\n        const accountInfo = {\n            displayName: this.state.displayName,\n            password: this.state.accountPassword,\n            profilePicURL: this.state.profilePicURL,\n            securityQuestion: this.state.accountSecurityQuestion,\n            securityAnswer: this.state.accountSecurityAnswer,\n        };\n        const res = await fetch(url, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n                },\n            method: 'POST',\n            body: JSON.stringify(accountInfo)}); \n        if (res.status == 200) { //successful account creation!\n            this.props.accountCreateStatus(\"New account created! Enter credentials to log in.\");\n        } else { //Unsuccessful account creation\n            //Grab textual error message\n            const resText = await res.text();\n            this.props.accountCreateStatus(resText);\n        }\n    }\n\n    render() {\n    return (\n    <div className=\"modal\" role=\"dialog\">\n        <div className=\"modal-dialog modal-lg\">\n        <div className=\"modal-content\">\n            <div className=\"modal-header\">\n            <center>\n            <h3 className=\"modal-title\"><b>Create New Account</b></h3>\n            </center>\n            <button className=\"close\" \n                onClick={this.props.cancelCreateAccount}>\n                &times;</button>\n            </div>\n            <div className=\"modal-body\">\n            <form onSubmit={this.handleCreateAccount}>\n            <label>\n                Email: \n                <input\n                className=\"form-control form-text form-center\"\n                name=\"accountName\"\n                type=\"email\"\n                size=\"35\"\n                placeholder=\"Enter Email Address\"\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\n                required={true}\n                ref={this.newUserRef}\n                value={this.state.accountName}\n                onChange={this.handleNewAccountChange}\n                onBlur={this.setDefaultDisplayName}\n                />\n            </label>\n            <label>\n                Password:\n                <input\n                className=\"form-control form-text form-center\"\n                name=\"accountPassword\"\n                type=\"password\"\n                size=\"35\"\n                placeholder=\"Enter Password\"\n                pattern=\n                \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\n                required={true}\n                value={this.state.accountPassword}\n                onChange={this.handleNewAccountChange}\n                />\n            </label>\n            <label>\n                Repeat Password:\n                <input\n                className=\"form-control form-text form-center\"\n                name=\"accountPasswordRepeat\"\n                type=\"password\"\n                size=\"35\"\n                placeholder=\"Repeat Password\"\n                required={true}\n                ref={this.repeatPassRef}\n                value={this.state.accountPasswordRepeat}\n                onChange={this.handleNewAccountChange}\n                />\n            </label>\n            <label>\n                Display Name:\n                <input\n                className=\"form-control form-text form-center\"\n                name=\"displayName\"\n                type=\"text\"\n                size=\"30\"\n                placeholder=\"Display Name\"\n                required={true}\n                value={this.state.displayName}\n                onChange={this.handleNewAccountChange}\n                />\n            </label>\n            <label>\n                Profile Picture:<br/>\n                <input\n                className=\"form-control form-text form-center\"\n                name=\"profilePic\"\n                type=\"file\"\n                accept=\"image/x-png,image/gif,image/jpeg\" \n                ref={this.profilePicRef}\n                value={this.state.profilePic}\n                onChange={this.handleNewAccountChange}\n                />\n                <img src={this.state.profilePicURL} \n                        height=\"60\" width=\"60\" />\n            </label> \n            <label>\n                Security Question:\n                <textarea\n                className=\"form-control form-text form-center\"\n                name=\"accountSecurityQuestion\"\n                size=\"35\"\n                placeholder=\"Security Question\"\n                rows=\"2\"\n                cols=\"35\"\n                maxLength=\"100\"\n                required={true}\n                value={this.state.accountSecurityQuestion}\n                onChange={this.handleNewAccountChange}\n                />\n            </label>\n            <label>\n                Answer to Security Question:\n                <textarea\n                className=\"form-control form-text form-center\"\n                name=\"accountSecurityAnswer\"\n                type=\"text\"\n                placeholder=\"Answer\"\n                rows=\"2\"\n                cols=\"35\"\n                maxLength=\"100\"\n                required={true}\n                value={this.state.accountSecurityAnswer}\n                onChange={this.handleNewAccountChange}\n                />\n            </label>\n            <br/>\n            <button role=\"submit\" \n                className=\"btn btn-primary btn-color-theme modal-submit-btn\">\n                <span className=\"fa fa-user-plus\"></span>&nbsp;Create Account\n            </button>\n            </form>\n            </div>\n        </div>\n        </div>\n    </div>\n    );\n    }\n    }\n\nexport default CreateAccountDialog;","import React from 'react'\n\nclass ResetPasswordDialog extends React.Component {\n    render() {\n        return;\n    }\n}\n\nexport default ResetPasswordDialog;","import React from 'react';\nimport CreateAccountDialog from './CreateAccountDialog.js';\nimport ResetPasswordDialog from './ResetPasswordDialog.js';\nimport AppMode from \"./../AppMode.js\";\n\nclass LoginPage extends React.Component {\n\nconstructor() {\n    super();\n    //Create a ref for the email input DOM element\n    this.emailInputRef = React.createRef();\n    this.passwordInputRef = React.createRef();\n    this.state = {accountCreateMsg: \"\",\n                  loginBtnIcon: \"fa fa-sign-in\",\n                  loginBtnLabel: \"Log In\",\n                  showCreateAccountDialog: false,\n                  showResetPasswordDialog: false,\n                  githubIcon: \"fa fa-github\",\n                  githubLabel: \"Sign in with GitHub\",\n                  googleLabel: \"Sign in with Google\",\n                  googleIcon: \"fa fa-google\",\n                  loginMsg: \"\"\n                  };\n} \n    \n//Focus cursor in email input field when mounted\ncomponentDidMount() {\n    this.emailInputRef.current.focus();\n}  \n\n//handleLogin -- Callback function that sets up initial app state upon login.\n//handleLogin = () => {\n    //Stop spinner\n//    this.setState({loginBtnIcon: \"fa fa-sign-in\",\n //                  loginBtnLabel: \"Log In\"});\n    //Set current user\n    //this.props.setUserId(this.emailInputRef.current.value);\n    //Trigger switch to FEED mode (default app landing page)\n    //this.props.changeMode(AppMode.FEED);\n//}\n\n\n//handleLoginSubmit -- Called when user clicks on login button.\nhandleLoginSubmit = async (event) => {\n    event.preventDefault();\n    this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\n                   loginBtnLabel: \"Logging In...\"});\n    const url = \"auth/login?username=\" + this.emailInputRef.current.value +\n                \"&password=\" + this.passwordInputRef.current.value;\n    const res = await fetch(url, {method: 'POST'}); \n    if (res.status == 200) { //successful login!\n        window.open(\"/\",\"_self\");\n    } else { //Unsuccessful login\n      const resText = await res.text();\n      this.setState({loginBtnIcon: \"fa fa-sign-in\",\n                     loginBtnLabel: \"Log In\",\n                     loginMsg: resText});\n    }\n}\n\n  //accountCreateStatus -- Called by child CreateAccountDialog component when \n  //user attempted to create new account. Hide the dialog and display \n  //a message indicating result of the attempt.\n  accountCreateStatus = (msg) => {\n      this.setState({accountCreateMsg: msg,\n                     showCreateAccountDialog: false});\n  }\n\n  //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\n  //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\n  cancelCreateAccount = () => {\n      this.setState({showCreateAccountDialog: false});\n  }\n\n//handleOAuthLogin -- Callback function that initiates contact with OAuth\n//provider\nhandleOAuthLogin = (provider) => {\n    window.open(`/auth/${provider}`,\"_self\");\n}\n\n//handleOAuthLoginClick -- Called whent the user clicks on button to\n//authenticate via a third-party OAuth service. The name of the provider is\n//passed in as a parameter.\nhandleOAuthLoginClick = (provider) => {\n   this.setState({[provider + \"Icon\"] : \"fa fa-spin fa-spinner\",\n                  [provider + \"Label\"] : \"Connecting...\"});\n   setTimeout(() => this.handleOAuthLogin(provider),1000);\n}\n\n\n  render() {\n    return(\n        <div id=\"login-mode-div\" className=\"padded-page\">\n        <center>\n            <h1 />\n            {this.state.accountCreateMsg != \"\" ? <p className=\"emphasis\">{this.state.accountCreateMsg}</p> : null}\n            {this.state.loginMsg != \"\" ? <p className=\"emphasis\">{this.state.loginMsg}</p> : null}\n            <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit}>\n            <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24 }}>\n                Email:\n                <input\n                ref={this.emailInputRef}\n                className=\"form-control login-text\"\n                type=\"email\"\n                placeholder=\"Enter Email Address\"\n                id=\"emailInput\"\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\n                required={true}\n                />\n            </label>\n            <p />\n            <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24 }}>\n                Password:\n                <input\n                ref={this.passwordInputRef}\n                className=\"form-control login-text\"\n                type=\"password\"\n                placeholder=\"Enter Password\"\n                pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\n                required={true}\n                />\n            </label>\n            <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\n            <button\n                type=\"submit\"\n                className=\"btn-color-theme btn btn-primary btn-block login-btn\">\n                <span id=\"login-btn-icon\" className={this.state.loginBtnIcon}/>\n                &nbsp;{this.state.loginBtnLabel}\n            </button>\n            <p>\n            <button type=\"button\" className=\"btn btn-link login-link\" \n                    onClick={() => {this.setState({showCreateAccountDialog: true});}}>\n                Create an account</button> | \n                <button type=\"button\" className=\"btn btn-link login-link\"\n                        onClick={() => {this.setState({showResetPasswordDialog: true});}}>\n                Reset your password</button>\n            </p>  \n            <button type=\"button\" className=\"btn btn-github\"\n               onClick={() => this.handleOAuthLoginClick(\"github\")}>\n              <span className={this.state.githubIcon}></span>&nbsp;\n                {this.state.githubLabel}\n            </button>\n            <button type=\"button\" className=\"btn btn-google\"\n               onClick={() => this.handleOAuthLoginClick(\"google\")}>\n              <span className={this.state.googleIcon}></span>&nbsp;\n                {this.state.googleLabel}\n            </button>\n            <p>\n                <i>Version CptS 489</i>\n            </p>\n            </form>\n            {this.state.showCreateAccountDialog ? \n              <CreateAccountDialog \n                accountCreateStatus={this.accountCreateStatus}\n                cancelCreateAccount={this.cancelCreateAccount} /> : null}\n            {this.state.showResetPasswordDialog ? <ResetPasswordDialog /> : null}\n        </center>\n        </div>\n        )\n    }\n} \n\nexport default LoginPage;\n","import React from 'react';\n\nclass FeedPage extends React.Component {\n\n    render() {\n        return (\n        <div className=\"padded-page\">\n            <center>\n            <h1 >Activity Feed</h1>\n            <h2>This page is under construction.</h2>\n            <img src=\"https://dl.dropboxusercontent.com/s/qpjhy9x9gwdxpob/SpeedScoreLogo64Trans.png\" \n             height=\"200\" width=\"200\"/>\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\n            </center>\n        </div>\n        );\n    }   \n}\n\nexport default FeedPage;","import React from 'react';\nimport AppMode from './../AppMode.js';\n\nclass RoundsTable extends React.Component {\n\n  //editRound -- Triggered when the user clicks the edit button for a given\n  //round. The id param is the unique property that identifies the round.\n  //Set the state variable representing the id of the round to be edited and\n  //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\n  //chosen round.\n  editRound = (id) => {\n    this.props.setEditId(id);\n    this.props.changeMode(AppMode.ROUNDS_EDITROUND);\n  }\n\n  //confirmDelete -- Triggered when the user clicks the delete button\n  //for a given round. The id paam is the unique property that \n  //identifies the round. Set the state variable representing the id\n  //of the round to be deleted and then present a dialog box asking\n  //the user to confirm the deletion.\n  //TO DO: Implement the confirmation dialog box. For now, we\n  //present alert box placeholder\n  confirmDelete = (id) => {\n    this.props.setDeleteId(id);\n    alert(\"Confirm Delete Goes here!\");\n  }\n\n\n  //renderTable -- render an HTML table displaying the rounds logged\n  //by the current user and providing buttons to view/edit and delete each round.\n  renderTable = () => {\n  let table = [];\n  for (let r = 0; r < this.props.rounds.length; ++r) {\n    table.push(\n      <tr key={r}>\n        <td>{this.props.rounds[r].date.substring(0,10)}</td>\n        <td>{this.props.rounds[r].course}</td>\n        <td>{(Number(this.props.rounds[r].strokes) + \n              Number(this.props.rounds[r].minutes)) +\n              \":\" + (this.props.rounds[r].seconds < 10 ?  \n                \"0\" + this.props.rounds[r].seconds :\n                this.props.rounds[r].seconds) + \" (\" + \n              this.props.rounds[r].strokes + \n              \" in \" + this.props.rounds[r].minutes + \":\" + \n              (this.props.rounds[r].seconds < 10 ?  \n                \"0\" + this.props.rounds[r].seconds :\n                this.props.rounds[r].seconds) + \")\"}\n        </td>\n        <td><button onClick={this.props.menuOpen ? null : () => \n          this.editRound(r)}>\n              <span className=\"fa fa-eye\"></span></button></td>\n        <td><button onClick={this.props.menuOpen ? null : \n          () => this.confirmDelete(r)}>\n              <span className=\"fa fa-trash\"></span></button></td>\n      </tr> \n    );\n  }\n  return table;\n  }\n\n  //render--render the entire rounds table with header, displaying a \"No\n  //Rounds Logged\" message in case the table is empty.\n  render() {\n    return(\n    <div className=\"padded-page\">\n      <h1></h1>\n      <table className=\"table table-hover\">\n        <thead className=\"thead-light\">\n        <tr>\n          <th>Date</th>\n          <th>Course</th>\n          <th>Score</th>\n          <th>View/Edit...</th>\n          <th>Delete</th>\n        </tr>\n        </thead>\n        <tbody>\n          {Object.keys(this.props.rounds).length === 0 ? \n          <tr>\n          <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No rounds logged</td>\n          </tr> : this.renderTable()\n          }\n        </tbody>\n      </table>\n    </div>\n    );\n  }\n}\n\nexport default RoundsTable;\n","import React from 'react';\nimport AppMode from './../AppMode.js';\n\nclass RoundForm extends React.Component {\n  constructor(props) {\n  super(props);\n  //Create date object for today, taking time zone into consideration\n  let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\n  //store date as ISO string\n  if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\n    //If logging a new round, the starting state is a default round with\n    //today's date.\n    this.state = {date:  today.toISOString().substr(0,10), \n                  course: \"\",\n                  type: \"practice\",\n                  holes: \"18\",\n                  strokes: 80,\n                  minutes: 50,\n                  seconds: \"00\",\n                  notes: \"\",\n                  faIcon: \"fa fa-save\",\n                  btnLabel: \"Save Round Data\"}\n  } else {\n    //if editing an existing round, the starting state is the round's\n    //current data\n    let thisRound = {...this.props.startData};\n    delete thisRound.id;\n    thisRound.faIcon = \"fa fa-edit\";\n    thisRound.btnLabel = \"Update Round Data\";\n    this.state = thisRound;\n  }\n}\n  \n  \n    handleChange = (event) => {\n        const name = event.target.name;\n        if (name === \"seconds\") {\n          let newSec = (event.target.value.length < 2 ? \"0\" + \n            event.target.value : event.target.value);\n          let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \n                                       newSec);\n          this.setState({seconds: newSec, SGS: newSGS});\n        } else if (name === \"strokes\") {\n          let newStrokes = event.target.value;\n          let newSGS = this.computeSGS(newStrokes, this.state.minutes, \n            this.state.seconds);\n          this.setState({strokes: newStrokes, SGS: newSGS});\n        } else if (name === \"minutes\") {\n            let newMin = event.target.value;\n            let newSGS = this.computeSGS(this.state.strokes, newMin, \n              this.state.seconds);\n            this.setState({minutes: newMin, SGS: newSGS});\n        } else {\n          this.setState({[name]: event.target.value});\n        }\n    }\n  \n  \n    //handleSubmit -- When the user clicks on the button to save/update the\n    //round, start the spinner and invoke the parent component's saveRound\n    //method to do the actual work. Note that saveRound is set to the correct\n    //parent method based on whether the user is logging a new round or editing\n    //an existing round.\n    handleSubmit = (event) => {\n        //start spinner\n        this.setState({faIcon: \"fa fa-spin fa-spinner\",\n                        btnLabel: (this.props.mode === AppMode.ROUNDS_LOGROUND ? \n                                    \"Saving...\" : \"Updating...\")});\n        //Prepare current round data to be saved\n        let roundData = this.state;\n        delete roundData.faIcon;\n        delete roundData.btnLabel;\n        //call saveRound on 1 second delay to show spinning icon\n        setTimeout(this.props.saveRound,1000,roundData); \n        event.preventDefault(); \n        }\n  \n\n    computeSGS = (strokes, min, sec) => {\n      return (Number(strokes) + Number(min)) \n                  + \":\" + sec;\n    }\n  \n    render() {\n      return (\n        <form className=\"padded-page\" onSubmit={this.handleSubmit}>\n          <center>\n            <label>\n              Date:\n              <input name=\"date\" className=\"form-control form-center\" \n                type=\"date\" value={this.state.date} onChange={this.handleChange} />\n            </label>\n            <p></p>\n            <label>\n              Course:\n              <input name=\"course\" className=\"form-control form-center\" type=\"text\"\n                value={this.state.course} onChange={this.handleChange}\n                placeholder=\"Course played\" size=\"50\" maxLength=\"50\" />\n            </label>\n          <p></p>\n          <label>Type:\n          <select name=\"type\" value={this.state.type} \n            className=\"form-control form-center\" onChange={this.handleChange}>\n            <option value=\"practice\">Practice</option>\n            <option value=\"tournament\">Tournament</option>\n          </select> \n          </label>\n          <p></p>\n          <label># Holes:\n          <select name=\"holes\" value={this.state.holes} \n            className=\"form-control form-center\" onChange={this.handleChange}>\n            <option value=\"9\">9</option>\n            <option value=\"18\">18</option>\n          </select> \n          </label>\n          <p></p>\n          <label># Strokes:\n          <input name=\"strokes\" className=\"form-control form-center\" type=\"number\" \n            min=\"9\" max=\"200\" value={this.state.strokes} \n            onChange={this.handleChange} />\n          </label>\n          <p></p>\n          <label>Time: <br></br>\n          <input name=\"minutes\" type=\"number\" size=\"3\"\n            min=\"10\" max=\"400\" value={this.state.minutes}\n            onChange={this.handleChange} />:  \n          <input name=\"seconds\" type=\"number\" size=\"2\"\n            min=\"0\" max=\"60\" value={this.state.seconds} \n            onChange={this.handleChange} />\n          </label>\n          <p></p>\n          <label>Speedgolf Score: <br></br>\n              <input name=\"SGS\" className=\"form-center\" type=\"text\" size=\"6\" \n                disabled={true} value={this.computeSGS(this.state.strokes,this.state.minutes,this.state.seconds)} />\n          </label>\n          <p></p>\n          <label>Notes:\n              <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \n                placeholder=\"Enter round notes\" value={this.state.notes} \n                onChange={this.handleChange} />\n          </label>\n          <p></p>\n          <p></p>\n          <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \n            className=\"btn btn-primary btn-color-theme\">\n              <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\n          </button>\n          </center>\n        </form>\n      );\n    }\n}\n\nexport default RoundForm;","//Rounds -- A parent component for the app's \"rounds\" mode.\n//Manages the rounds data for the current user and conditionally renders the\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\n\nimport React from 'react';\nimport AppMode from './../AppMode.js';\nimport RoundsTable from './RoundsTable.js';\nimport RoundForm from './RoundForm.js';\nimport FloatingButton from './FloatingButton.js';\n\nclass Rounds extends React.Component {\n\n    //Initialize a Rounds object based on local storage\n    constructor() {\n        super();\n        this.state = {deleteId: \"\",\n                      editId: \"\"};           \n    }\n\n    //componentDidMount -- After the component moutns, obtain current user's \n    //rounds from the server and push them into component state\n    // componentDidMount = async () => {\n    //     let url = \"/rounds/\" + this.props.userObj.id;\n    //     let res = await fetch(url, {method: 'GET'});\n    //     if (res.status != 200) {\n    //         let msg = await res.text();\n    //         alert(\"There was an error obtaining rounds data for this user: \" \n    //         + msg);\n    //         return;\n    //     } \n    //     let body = await res.json();\n    //     body = JSON.parse(body);\n    //     alert(\"in componentDidMount with GET results: \" + body);\n    //     this.setState({rounds: body}, this.props.changeMode(AppMode.ROUNDS));\n    // }\n\n    //addRound -- Given an object newData containing a new round, use the \n    //server POST route to add the new round to the database. If the add is\n    //successful, call on the refreshOnUpdate() method to force the parent\n    //App component to refresh its state from the database and re-render itself,\n    //allowing the change to be propagated to the Rounds table. Then switch\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\n    addRound = async (newData) => {\n        const url = '/rounds/' + this.props.userObj.id;\n        const res = await fetch(url, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n                },\n            method: 'POST',\n            body: JSON.stringify(newData)}); \n        const msg = await res.text();\n        if (res.status != 200) {\n            alert(\"An error occurred when attempting to add new round to database: \"    \n            + msg);\n            this.props.changeMode(AppMode.ROUNDS);\n        } else {\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\n        }\n    }\n\n    //editRound -- Given an object newData containing updated data on an\n    //existing round, update the current user's round in the database. \n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\n    //round. \n    editRound = async (newData) => {\n        const url = '/rounds/' + this.props.userObj.id + '/' + \n            this.props.userObj.rounds[this.state.editId]._id;\n        const res = await fetch(url, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n                },\n            method: 'PUT',\n            body: JSON.stringify(newData)}); \n        const msg = await res.text();\n        if (res.status != 200) {\n            alert(\"An error occurred when attempting to add new round to database: \" \n            + msg);\n            this.props.changeMode(AppMode.ROUNDS);\n        } else {\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\n        }\n    }\n\n\n    //deleteRound -- Delete the current user's round uniquely identified by\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\n    deleteRound = async () => {\n        //TO DO: Fill this in\n    }\n \n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\n    //the user is considering deleting.\n    setDeleteId = (val) => {\n        this.setState({deleteId: val});\n    }\n\n    //setEditId -- Capture in this.state.editId the unique id of the item\n    //the user is considering editing.\n    setEditId = (val) => {\n        this.setState({editId: val});\n    }\n    \n    //render -- Conditionally render the Rounds mode page as either the rounds\n    //table, the rounds form set to obtain a new round, or the rounds form set\n    //to edit an existing round.\n    render() {\n        switch(this.props.mode) {\n            case AppMode.ROUNDS:\n                return (\n                    <>\n                    <RoundsTable \n                        rounds={this.props.userObj.rounds}\n                        setEditId={this.setEditId}\n                        setDeleteId={this.setDeleteId}\n                        deleteRound={this.deleteRound}\n                        changeMode={this.props.changeMode}\n                        menuOpen={this.props.menuOpen} /> \n                    <FloatingButton\n                        handleClick={() => \n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\n                        menuOpen={this.props.menuOpen}\n                        icon={\"fa fa-plus\"} />\n                    </>\n                );\n            case AppMode.ROUNDS_LOGROUND:\n                return (\n                    <RoundForm\n                        mode={this.props.mode}\n                        startData={\"\"} \n                        saveRound={this.addRound} />\n                );\n            case AppMode.ROUNDS_EDITROUND:\n                let thisRound = {...this.props.userObj.rounds[this.state.editId]};\n                thisRound.date = thisRound.date.substr(0,10);\n                if (thisRound.seconds < 10) {\n                    thisRound.seconds = \"0\" + thisRound.seconds;\n                } \n                delete thisRound.SGS;\n                return (\n                    <RoundForm\n                        mode={this.props.mode}\n                        startData={thisRound} \n                        saveRound={this.editRound} />\n                );\n        }\n    }\n\n}   \n\nexport default Rounds;\n","import React from 'react';\n\nclass CoursesPage extends React.Component {\n\n    render() {\n        return (\n        <div className=\"padded-page\">\n            <center>\n            <h1 >Courses</h1>\n            <h2>This page is under construction.</h2>\n            <img src=\"https://dl.dropboxusercontent.com/s/qpjhy9x9gwdxpob/SpeedScoreLogo64Trans.png\" \n             height=\"200\" width=\"200\"/>\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\n            </center>\n        </div>\n        );\n    }   \n}\n\nexport default CoursesPage;","import React from 'react';\nimport NavBar from './NavBar.js';\nimport SideMenu from './SideMenu.js';\nimport ModeBar from './ModeBar.js';\nimport FloatingButton from './FloatingButton.js';\nimport LoginPage from './LoginPage.js';\nimport AppMode from \"./../AppMode.js\"\nimport FeedPage from './FeedPage.js';\nimport Rounds from './Rounds.js';\nimport CoursesPage from './CoursesPage.js';\n\nconst modeTitle = {};\nmodeTitle[AppMode.LOGIN] = \"Welcome to SpeedScore\";\nmodeTitle[AppMode.FEED] = \"Activity Feed\";\nmodeTitle[AppMode.ROUNDS] = \"My Rounds\";\nmodeTitle[AppMode.ROUNDS_LOGROUND] = \"Log New Round\";\nmodeTitle[AppMode.ROUNDS_EDITROUND] = \"Edit Round\";\nmodeTitle[AppMode.COURSES] = \"Courses\";\n\nconst modeToPage = {};\nmodeToPage[AppMode.LOGIN] = LoginPage;\nmodeToPage[AppMode.FEED] = FeedPage;\nmodeToPage[AppMode.ROUNDS] = Rounds;\nmodeToPage[AppMode.ROUNDS_LOGROUND] = Rounds;\nmodeToPage[AppMode.ROUNDS_EDITROUND] = Rounds;\nmodeToPage[AppMode.COURSES] = CoursesPage;\n\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {mode: AppMode.LOGIN,\n                  menuOpen: false,\n                  authenticated: false,\n                  userObj: {displayName: \"\", profilePicURL: \"\"},\n                 };\n  }\n\n  //componentDidMount\n  componentDidMount() {\n    if (!this.state.authenticated) { \n      //Use /auth/test route to (re)-test authentication and obtain user data\n      fetch(\"/auth/test\")\n        .then((response) => response.json())\n        .then((obj) => {\n          if (obj.isAuthenticated) {\n            this.setState({\n              userObj: obj.user,\n              authenticated: true,\n              mode: AppMode.FEED //We're authenticated so can get into the app.\n            });\n          }\n        }\n      )\n    } \n  }\n\n  //refreshOnUpdate(newMode) -- Called by child components when user data changes in \n  //the database. The function calls the users/:userid (GET) route to update \n  //the userObj state var based on the latest database changes, and sets the \n  //mode state var is set to newMode. After this method is called, the\n  //App will re-render itself, forcing the new data to \n  //propagate to the child components when they are re-rendered.\n  refreshOnUpdate = async(newMode) => {\n    let response = await fetch(\"/users/\" + this.state.userObj.id);\n    response = await response.json();\n    const obj = JSON.parse(response);\n    this.setState({\n      userObj: obj,\n      mode: newMode\n    });\n  }\n\n\n  handleChangeMode = (newMode) => {\n    this.setState({mode: newMode});\n  }\n\n  openMenu = () => {\n    this.setState({menuOpen : true});\n  }\n  \n  closeMenu = () => {\n    this.setState({menuOpen : false});\n  }\n\n  toggleMenuOpen = () => {\n    this.setState(prevState => ({menuOpen: !prevState.menuOpen}));\n  }\n\n  setUserId = (Id) => {\n    this.setState({userId: Id,\n                   authenticated: true});\n  }\n\n\n  render() {\n    const ModePage = modeToPage[this.state.mode];\n    return (\n      <div>\n        <NavBar \n          title={modeTitle[this.state.mode]} \n          mode={this.state.mode}\n          changeMode={this.handleChangeMode}\n          menuOpen={this.state.menuOpen}\n          toggleMenuOpen={this.toggleMenuOpen}/>\n          <SideMenu \n            menuOpen = {this.state.menuOpen}\n            mode={this.state.mode}\n            toggleMenuOpen={this.toggleMenuOpen}\n            displayName={this.state.userObj.displayName}\n            profilePicURL={this.state.userObj.profilePicURL}\n            logOut={() => this.handleChangeMode(AppMode.LOGIN)}/>\n          <ModeBar \n            mode={this.state.mode} \n            changeMode={this.handleChangeMode}\n            menuOpen={this.state.menuOpen}/>\n          <ModePage \n            menuOpen={this.state.menuOpen}\n            mode={this.state.mode}\n            changeMode={this.handleChangeMode}\n            userObj={this.state.userObj}\n            refreshOnUpdate={this.refreshOnUpdate}/>\n      </div>\n    );  \n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-social/bootstrap-social.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './styles/index.css';\nimport App from './components/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}